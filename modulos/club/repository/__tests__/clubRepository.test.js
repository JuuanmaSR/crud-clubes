/* eslint-disable no-console */
/* eslint-disable no-undef */
const { Sequelize } = require('sequelize');
const EquipoModel = require('../../model/equipoModel');
const clubIdNotDefinedError = require('../error/clubIdNotDefinedError');
const clubNotFoundError = require('../error/clubNotFoundError');
const ClubRepository = require('../clubRepository');
const Equipo = require('../../entidades/equipo');

const sequelizeInstance = new Sequelize('sqlite::memory');
/**
 * @type ClubRepository
 */
let reporsitory;

const sampleEquipo = new Equipo({
  areaName: 'Argentina',
  name: 'River',
  shortName: 'CARP',
  crestUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/f2/CA_river_plate_logo.svg/128px-CA_river_plate_logo.svg.png',
  address: 'Avda. Figueroa Alcorta 7597 Buenos Aires, Argentina',

});

beforeAll(() => {
  const equipo = EquipoModel.setup(sequelizeInstance);
  reporsitory = new ClubRepository(equipo);
});

beforeEach(async () => {
  await sequelizeInstance.sync({ force: true });
});
test('Crea un equipo cuando la entidad no tiene id', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newEquipo = await reporsitory.save(sampleEquipo);
  expect(newEquipo.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Guardar un equipo existente actualiza los valores', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newEquipo = await reporsitory.save(sampleEquipo);

  expect(newEquipo.id).toEqual(NEW_AUTOGENERATED_ID);

  newEquipo.name = 'Boca';
  console.log(newEquipo);
  const equipoModificado = await reporsitory.save(newEquipo);

  expect(equipoModificado.id).toEqual(NEW_AUTOGENERATED_ID);
  expect(equipoModificado.name).toEqual('Boca');
});

test('Eliminar un equipo devuelve true', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newEquipo = await reporsitory.save(sampleEquipo);
  expect(newEquipo.id).toEqual(NEW_AUTOGENERATED_ID);
  await expect(reporsitory.delete(newEquipo)).resolves.toEqual(true);
  await expect(reporsitory.getById(NEW_AUTOGENERATED_ID)).rejects.toThrow(clubNotFoundError);
});

test('Eliminar un equipo sin parametros da error', async () => {
  await expect(reporsitory.delete()).rejects.toThrow(clubIdNotDefinedError);
});

test('Eliminar un equipo sin id da error', async () => {
  await expect(reporsitory.delete({})).rejects.toThrow(clubIdNotDefinedError);
});

test('Eliminar un equipo con id inexistente devuelve false', async () => {
  await expect(reporsitory.delete({ id: 1 })).resolves.toEqual(false);
});
